package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"github.com/99designs/gqlgen/graphql"
	"github.com/DaoVuDat/graphql/.gen/model"
	"github.com/DaoVuDat/graphql/sqlStore"
	"github.com/DaoVuDat/graphql/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Jobs is the resolver for the jobs field.
func (r *companyResolver) Jobs(ctx context.Context, obj *model.Company) ([]*model.Job, error) {
	return sqlStore.FindJobByCompanyId(r.Db, obj.ID), nil
}

// Date is the resolver for the date field.
func (r *jobResolver) Date(ctx context.Context, obj *model.Job) (string, error) {
	return utils.Truncate(obj.CreatedAt, len("yyyy-mm-dd")), nil
}

// Company is the resolver for the company field.
func (r *jobResolver) Company(ctx context.Context, obj *model.Job) (*model.Company, error) {
	return sqlStore.FindCompanyById(r.Db, obj.CompanyId)
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context) ([]*model.Job, error) {
	jobs := sqlStore.ListJobs(r.Db)
	return jobs, nil
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context) ([]*model.Company, error) {
	companies := sqlStore.ListCompany(r.Db)
	return companies, nil
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, id string) (*model.Job, error) {
	job, err := sqlStore.FindJobById(r.Db, id)
	if err != nil {
		return nil, &gqlerror.Error{
			Path:    graphql.GetPath(ctx),
			Message: fmt.Sprintf("No job found with id %s", id),
			Extensions: map[string]interface{}{
				"code": "NOT_FOUND",
			},
		}
	}
	return job, nil
}

// Company is the resolver for the company field.
func (r *queryResolver) Company(ctx context.Context, id string) (*model.Company, error) {
	company, err := sqlStore.FindCompanyById(r.Db, id)

	if err != nil {
		return nil, &gqlerror.Error{
			Path:    graphql.GetPath(ctx),
			Message: fmt.Sprintf("No company found with id %s", id),
			Extensions: map[string]interface{}{
				"code": "NOT_FOUND",
			},
		}
	}

	return company, nil
}

// Company returns CompanyResolver implementation.
func (r *Resolver) Company() CompanyResolver { return &companyResolver{r} }

// Job returns JobResolver implementation.
func (r *Resolver) Job() JobResolver { return &jobResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type companyResolver struct{ *Resolver }
type jobResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
