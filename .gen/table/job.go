//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Job = newJobTable("", "job", "")

type jobTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnString
	CompanyId   sqlite.ColumnString
	Title       sqlite.ColumnString
	Description sqlite.ColumnString
	CreatedAt   sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type JobTable struct {
	jobTable

	EXCLUDED jobTable
}

// AS creates new JobTable with assigned alias
func (a JobTable) AS(alias string) *JobTable {
	return newJobTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new JobTable with assigned schema name
func (a JobTable) FromSchema(schemaName string) *JobTable {
	return newJobTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new JobTable with assigned table prefix
func (a JobTable) WithPrefix(prefix string) *JobTable {
	return newJobTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new JobTable with assigned table suffix
func (a JobTable) WithSuffix(suffix string) *JobTable {
	return newJobTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newJobTable(schemaName, tableName, alias string) *JobTable {
	return &JobTable{
		jobTable: newJobTableImpl(schemaName, tableName, alias),
		EXCLUDED: newJobTableImpl("", "excluded", ""),
	}
}

func newJobTableImpl(schemaName, tableName, alias string) jobTable {
	var (
		IDColumn          = sqlite.StringColumn("id")
		CompanyIdColumn   = sqlite.StringColumn("companyId")
		TitleColumn       = sqlite.StringColumn("title")
		DescriptionColumn = sqlite.StringColumn("description")
		CreatedAtColumn   = sqlite.StringColumn("createdAt")
		allColumns        = sqlite.ColumnList{IDColumn, CompanyIdColumn, TitleColumn, DescriptionColumn, CreatedAtColumn}
		mutableColumns    = sqlite.ColumnList{CompanyIdColumn, TitleColumn, DescriptionColumn, CreatedAtColumn}
	)

	return jobTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CompanyId:   CompanyIdColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
